use master;
drop database taller_jhaka;
create database taller_jhaka;
use taller_jhaka;


CREATE TABLE cliente (
    IDE_CLI INT PRIMARY KEY identity(1,1),
    NOM_CLI VARCHAR(100),
	APE_CLI VARCHAR(100),
    DNI_CLI VARCHAR(15),
    TEL_CLI VARCHAR(20),
    DIR_CLI VARCHAR(200)
);

CREATE TABLE vehiculo (
    IDE_VEH INT PRIMARY KEY identity(1,1),
    IDE_CLI INT,
    MAR_VEH VARCHAR(50),
    MOD_VEH VARCHAR(50),
    PLA_VEH VARCHAR(15),
    FOREIGN KEY (IDE_CLI) REFERENCES cliente(IDE_CLI)
);

CREATE TABLE repuesto (
    IDE_REP INT PRIMARY KEY identity(1,1),
    NOM_REP VARCHAR(100),
    STO_REP INT,
    PRE_REP DECIMAL
);


CREATE TABLE servicio (
    IDE_SER INT PRIMARY KEY identity(1,1),
    NOM_SER VARCHAR(100),
	PRE_SER DECIMAL
);


CREATE TABLE cotizacion (
    IDE_COT INT PRIMARY KEY identity(1,1),
    FEC_COT DATETIME,
	IDE_VEH INT,
	FOREIGN KEY (IDE_VEH) REFERENCES vehiculo(IDE_VEH)
);


CREATE TABLE detalle_repuesto (
    DET_REP INT PRIMARY KEY identity(1,1),
    IDE_COT INT,
    IDE_REP INT,
    CAN_DET INT,
    STO_DET DECIMAL,
    FOREIGN KEY (IDE_COT) REFERENCES cotizacion(IDE_COT),
    FOREIGN KEY (IDE_REP) REFERENCES repuesto(IDE_REP)
);

CREATE TABLE detalle_servicio(
    DET_SER INT PRIMARY KEY identity(1,1),
    IDE_COT INT,
    IDE_SER INT,
    FOREIGN KEY (IDE_COT) REFERENCES cotizacion(IDE_COT),
    FOREIGN KEY (IDE_SER) REFERENCES servicio(IDE_SER)
);

CREATE TABLE factura (
    IDE_FAC INT PRIMARY KEY identity(1,1),
    IDE_COT INT,
    FEC_FAC DATETIME,
    TOT_FAC DECIMAL,
    FOREIGN KEY (IDE_COT) REFERENCES cotizacion(IDE_COT),
);


---------------------CLIENTE-------------------------------------------------------------------

IF OBJECT_ID('SP_LISTACLIENTE') IS NOT NULL
    DROP PROC SP_LISTACLIENTE
GO

CREATE PROCEDURE SP_LISTACLIENTE
AS
    SELECT IDE_CLI, NOM_CLI +SPACE(1)+ APE_CLI AS NOM_CLI, DNI_CLI, TEL_CLI, DIR_CLI
    FROM CLIENTE;
GO

----------
IF OBJECT_ID('SP_LISTACLIENTE_BOX') IS NOT NULL
    DROP PROC SP_LISTACLIENTE_BOX
GO

CREATE PROCEDURE SP_LISTACLIENTE_BOX
AS
    SELECT IDE_CLI, NOM_CLI +SPACE(1)+ APE_CLI AS NOM_CLI 
	FROM CLIENTE;
GO
----------
IF OBJECT_ID('SP_BUSCARCLIENTEXID') IS NOT NULL
    DROP PROC SP_BUSCARCLIENTEXID 
GO

CREATE PROCEDURE SP_BUSCARCLIENTEXID @IDE INT
AS
	SELECT *
    FROM CLIENTE C
	WHERE C.IDE_CLI= @IDE
GO

----------

IF OBJECT_ID('SP_MERGECLIENTE') IS NOT NULL
    DROP PROC SP_MERGECLIENTE
GO
CREATE PROCEDURE SP_MERGECLIENTE
    @IDE INT,
    @NOM VARCHAR(50),
    @APE VARCHAR(50),
    @DNI INT,
    @TEL INT,
    @DIR VARCHAR(100)
AS
    MERGE CLIENTE
	AS TARGET USING (SELECT @IDE, @NOM, @APE, @DNI, @TEL, @DIR) 
	AS SOURCE(ide_cli, nom_cli, ape_cli, dni_cli, tel_cli, dir_cli)
    ON TARGET.ide_cli = SOURCE.ide_cli
    WHEN MATCHED THEN
        UPDATE SET TARGET.nom_cli = @NOM, TARGET.ape_cli = @APE, TARGET.dni_cli = @DNI, TARGET.tel_cli=@TEL , TARGET.dir_cli=@DIR
    WHEN NOT MATCHED THEN
        INSERT VALUES (SOURCE.nom_cli, SOURCE.ape_cli, SOURCE.dni_cli, SOURCE.tel_cli, SOURCE.dir_cli);
GO


--------------VEHICULO-------------

IF OBJECT_ID('SP_LISTAVEHICULO_B') IS NOT NULL
    DROP PROC SP_LISTAVEHICULO_B
GO
CREATE PROC SP_LISTAVEHICULO_B
AS
	SELECT * FROM vehiculo
GO

----------

IF OBJECT_ID('SP_LISTAVEHICULO') IS NOT NULL 
	DROP PROC SP_LISTAVEHICULO
GO
CREATE PROC SP_LISTAVEHICULO
AS
	SELECT V.IDE_VEH, V.MAR_VEH, V.MOD_VEH, V.PLA_VEH,V.IDE_CLI, C.NOM_CLI+SPACE(1)+C.APE_CLI AS NOM_CLI
		FROM vehiculo V
		JOIN cliente C ON V.IDE_CLI=C.IDE_CLI
GO

IF OBJECT_ID('SP_LISTAVEHICULOBOX') IS NOT NULL 
	DROP PROC SP_LISTAVEHICULOBOX
GO
CREATE PROC SP_LISTAVEHICULOBOX
AS
	SELECT V.IDE_VEH, V.MAR_VEH+SPACE(1)+ V.MOD_VEH+SPACE(1)+V.PLA_VEH AS VEH
		FROM vehiculo V
GO




----------

IF OBJECT_ID('SP_BUSCARVEHICULOXID') IS NOT NULL
    DROP PROCEDURE SP_BUSCARVEHICULOXID
GO

CREATE PROCEDURE SP_BUSCARVEHICULOXID @IDE INT
AS
    SELECT * FROM vehiculo V
		 WHERE V.IDE_VEH = @IDE
GO

---------

IF OBJECT_ID('SP_MERGEVEHICULO') IS NOT NULL
    DROP PROCEDURE SP_MERGEVEHICULO;
GO
CREATE PROCEDURE SP_MERGEVEHICULO
(
    @IDE INT,
    @CLI INT,
    @MAR VARCHAR(50),
    @MOD VARCHAR(50),
    @PLA VARCHAR(20)
)
AS
    MERGE VEHICULO AS TARGET
    USING (SELECT @IDE, @CLI, @MAR, @MOD, @PLA) 
	AS SOURCE(IDE_VEH, IDE_CLI, MAR_VEH, MOD_VEH, PLA_VEH)
    ON TARGET.IDE_VEH=SOURCE.IDE_VEH
    WHEN MATCHED THEN
        UPDATE SET TARGET.IDE_CLI=@CLI,TARGET.MAR_VEH=@MAR,TARGET.MOD_VEH=@MOD,TARGET.PLA_VEH=@PLA
    WHEN NOT MATCHED THEN
        INSERT VALUES (SOURCE.IDE_CLI,SOURCE.MAR_VEH,SOURCE.MOD_VEH,SOURCE.PLA_VEH);
GO

----------------------------------------------REPUESTO---------------------------------------------------------
IF OBJECT_ID('SP_LISTADOREPUESTO') IS NOT NULL
    DROP PROC SP_LISTADOREPUESTO
GO
CREATE PROC SP_LISTADOREPUESTO
AS
	SELECT * FROM repuesto
GO


IF OBJECT_ID('SP_BUSCARREPUESTOXID') IS NOT NULL
    DROP PROCEDURE SP_BUSCARREPUESTOXID 
GO

CREATE PROCEDURE SP_BUSCARREPUESTOXID @IDE INT
AS
    SELECT * FROM repuesto R
		 WHERE R.IDE_REP = @IDE
GO

----------

IF OBJECT_ID('SP_MERGEREPUESTO') IS NOT NULL
    DROP PROCEDURE SP_MERGEREPUESTO
GO
CREATE PROCEDURE SP_MERGEREPUESTO (@IDE INT, @NOM VARCHAR(100), @STO INT, @PRE DECIMAL)
AS
	MERGE REPUESTO
	AS TARGET USING(SELECT @IDE, @NOM, @STO, @PRE)
	AS SOURCE(IDE_REP, NOM_REP, STO_REP, PRE_REP)
	ON TARGET.IDE_REP=SOURCE.IDE_REP
	WHEN MATCHED THEN
        UPDATE SET TARGET.NOM_REP=@NOM,TARGET.STO_REP=@STO,TARGET.PRE_REP=@PRE
    WHEN NOT MATCHED THEN
        INSERT VALUES (SOURCE.NOM_REP,SOURCE.STO_REP,SOURCE.PRE_REP);
GO

----------------------------------------------SERVICIO---------------------------------------------------------
IF OBJECT_ID('SP_LISTADOSERVICIO') IS NOT NULL
    DROP PROC SP_LISTADOSERVICIO
GO
CREATE PROC SP_LISTADOSERVICIO
AS
	SELECT * FROM servicio
GO

IF OBJECT_ID('SP_BUSCARSERVICIOXID') IS NOT NULL
    DROP PROCEDURE SP_BUSCARSERVICIOXID 
GO

CREATE PROCEDURE SP_BUSCARSERVICIOXID @IDE INT
AS
    SELECT * FROM servicio S
		 WHERE S.IDE_SER = @IDE
GO

----------

IF OBJECT_ID('SP_MERGESERVICIO') IS NOT NULL
    DROP PROCEDURE SP_MERGESERVICIO
GO
CREATE PROCEDURE SP_MERGESERVICIO (@IDE INT, @NOM VARCHAR(100), @PRE DECIMAL)
AS
	MERGE SERVICIO
	AS TARGET USING(SELECT @IDE, @NOM, @PRE)
	AS SOURCE(IDE_SER, NOM_SER, PRE_SER)
	ON TARGET.IDE_SER=SOURCE.IDE_SER
	WHEN MATCHED THEN
        UPDATE SET TARGET.NOM_SER=@NOM, TARGET.PRE_SER=@PRE
    WHEN NOT MATCHED THEN
        INSERT VALUES (SOURCE.NOM_SER, SOURCE.PRE_SER);
GO

----------------------------------------------COTIZACION---------------------------------------------------------
IF OBJECT_ID('SP_LISTADOCOTIZACION_B') IS NOT NULL
    DROP PROC SP_LISTADOCOTIZACION_B
GO
CREATE PROC SP_LISTADOCOTIZACION_B
AS
	SELECT * FROM cotizacion
GO

----------
IF OBJECT_ID('SP_LISTADOCOTIZACION') IS NOT NULL
    DROP PROC SP_LISTADOCOTIZACION 
GO
CREATE PROC SP_LISTADOCOTIZACION
AS
	SELECT C.IDE_COT, C.FEC_COT, V.MAR_VEH + SPACE(1)+V.MOD_VEH AS NOM_VEH, CL.NOM_CLI
	FROM cotizacion C 
	JOIN vehiculo V ON V.IDE_VEH = C.IDE_VEH
	JOIN cliente CL ON V.IDE_CLI = CL.IDE_CLI
GO

IF OBJECT_ID('SP_BUSCARCOTIZACIONXID') IS NOT NULL
    DROP PROC SP_BUSCARCOTIZACION 
GO
CREATE PROC SP_BUSCARCOTIZACION @IDE INT
AS
	SELECT *
	FROM cotizacion C
	WHERE C.IDE_COT = @IDE 
GO

----------
IF OBJECT_ID('SP_LISTARDETALLESERVICIO') IS NOT NULL
    DROP PROC SP_LISTARDETALLESERVICIO 
GO
CREATE PROC SP_LISTARDETALLESERVICIO @IDE INT
AS
	SELECT S.DET_SER, S.IDE_SER, SE.NOM_SER, SE.PRE_SER
	FROM detalle_servicio S 
	JOIN servicio SE ON SE.IDE_SER = S.IDE_SER
	WHERE S.IDE_COT = @IDE 
GO	

IF OBJECT_ID('SP_LISTARDETALLEREPUESTO') IS NOT NULL
    DROP PROC SP_LISTARDETALLEREPUESTO 
GO
CREATE PROC SP_LISTARDETALLEREPUESTO @IDE INT
AS
	SELECT R.DET_REP, R.IDE_REP,RE.NOM_REP,R.CAN_DET, RE.PRE_REP, R.STO_DET
	FROM detalle_repuesto R 
	JOIN repuesto RE ON RE.IDE_REP = R.IDE_REP
	WHERE R.IDE_COT = @IDE 
GO	

IF OBJECT_ID('SP_ELIMINARDETALLEREPUESTO') IS NOT NULL
   DROP PROC SP_ELIMINARDETALLEREPUESTO
GO
CREATE PROC SP_ELIMINARDETALLEREPUESTO(@IDE INT)
AS
	DELETE detalle_repuesto WHERE DET_REP=@IDE
GO

IF OBJECT_ID('SP_ELIMINARDETALLESERVICIO') IS NOT NULL
   DROP PROC SP_ELIMINARDETALLESERVICIO
GO
CREATE PROC SP_ELIMINARDETALLESERVICIO(@IDE INT)
AS
	DELETE detalle_servicio WHERE DET_SER=@IDE
GO

----------

IF OBJECT_ID('SP_MERGECOTIZACION') IS NOT NULL
    DROP PROCEDURE SP_MERGECOTIZACION 
GO
CREATE PROCEDURE SP_MERGECOTIZACION (@IDE INT, @VEH INT)
AS
	MERGE COTIZACION 
	AS TARGET USING(SELECT @IDE, @VEH)
	AS SOURCE(IDE_COT,IDE_VEH)
	ON TARGET.IDE_COT = SOURCE.IDE_COT
    WHEN MATCHED THEN
        UPDATE SET 
            TARGET.IDE_VEH = SOURCE.IDE_VEH
    WHEN NOT MATCHED THEN
        INSERT (FEC_COT, IDE_VEH) 
        VALUES (GETDATE(), SOURCE.IDE_VEH); 
GO

IF OBJECT_ID('SP_AGREGARREPUESTO') IS NOT NULL
    DROP PROCEDURE SP_AGREGARREPUESTO
GO
CREATE PROCEDURE SP_AGREGARREPUESTO @IDE_COT INT, @IDE_REP INT, @CAN_DET INT
AS
    DECLARE @PRE DECIMAL(18,2);
    DECLARE @STO_DET DECIMAL(18,2);
    SELECT @PRE = PRE_REP 
	FROM repuesto
	WHERE IDE_REP = @IDE_REP;
    SET @STO_DET = @CAN_DET * @PRE;

    MERGE detalle_repuesto
	AS TARGET USING (SELECT @IDE_COT, @IDE_REP,@CAN_DET, @STO_DET ) 
	AS SOURCE(IDE_COT,IDE_REP,CAN_DET,STO_DET)
	ON TARGET.IDE_COT=SOURCE.IDE_COT AND TARGET.IDE_REP=SOURCE.IDE_REP
    WHEN MATCHED THEN 
        UPDATE SET 
            TARGET.CAN_DET = TARGET.CAN_DET + @CAN_DET,
            TARGET.STO_DET = TARGET.STO_DET + @STO_DET
    WHEN NOT MATCHED THEN 
        INSERT VALUES (SOURCE.IDE_COT, SOURCE.IDE_REP, @CAN_DET, @STO_DET);
go



IF OBJECT_ID('SP_AGREGARSERVICIO') IS NOT NULL
    DROP PROCEDURE SP_AGREGARSERVICIO
GO
CREATE PROCEDURE SP_AGREGARSERVICIO @IDE_COT INT, @IDE_SER INT
AS
    MERGE detalle_servicio 
	AS TARGET USING (SELECT @IDE_COT, @IDE_SER) 
	AS SOURCE (IDE_COT, IDE_SER)
	ON TARGET.IDE_COT=SOURCE.IDE_COT AND TARGET.IDE_SER=SOURCE.IDE_SER
    WHEN MATCHED THEN 
        UPDATE SET IDE_SER = SOURCE.IDE_SER
    WHEN NOT MATCHED THEN 
        INSERT VALUES (SOURCE.IDE_COT, SOURCE.IDE_SER);
GO

IF OBJECT_ID('SP_DETALLESCOTIZACION') IS NOT NULL
   DROP PROC SP_DETALLESCOTIZACION 
GO
CREATE PROC SP_DETALLESCOTIZACION(@IDE INT)
AS
	SELECT C.IDE_COT, C.FEC_COT, CI.NOM_CLI+SPACE(1)+CI.APE_CLI AS NOM_CLI, CI.TEL_CLI, V.MAR_VEH+SPACE(1)+V.MOD_VEH AS VEH, V.PLA_VEH 
	FROM cotizacion C 
	JOIN vehiculo V ON C.IDE_VEH = V.IDE_VEH
	JOIN cliente CI ON V.IDE_CLI = CI.IDE_CLI
	WHERE  C.IDE_COT = @IDE
GO


IF OBJECT_ID('SP_LISTADOFACTURA') IS NOT NULL
    DROP PROC SP_LISTADOFACTURA 
GO
CREATE PROC SP_LISTADOFACTURA
AS
	SELECT *
	FROM factura F 
GO

IF OBJECT_ID('SP_DETALLESFACTURA') IS NOT NULL
    DROP PROC SP_DETALLESFACTURA 
GO
CREATE PROC SP_DETALLESFACTURA (@IDE INT)
AS
	SELECT *
	FROM factura F 
	WHERE   F.IDE_FAC = @IDE
GO

IF OBJECT_ID('SP_MERGEFACTURA') IS NOT NULL
    DROP PROCEDURE SP_MERGEFACTURA
GO
CREATE PROCEDURE SP_MERGEFACTURA @IDE_COT INT
AS
    DECLARE @totalServicios DECIMAL = (
        SELECT ISNULL(SUM(s.PRE_SER), 0)
        FROM detalle_servicio ds
        INNER JOIN servicio s ON ds.IDE_SER = s.IDE_SER
        WHERE ds.IDE_COT = @IDE_COT
    );
    DECLARE @totalRepuestos DECIMAL = (
        SELECT ISNULL(SUM(dr.STO_DET), 0)
        FROM detalle_repuesto dr
        WHERE dr.IDE_COT = @IDE_COT
    );
    DECLARE @TOT_FAC DECIMAL = @totalServicios + @totalRepuestos;


    MERGE FACTURA 
	AS TARGET USING (SELECT @IDE_COT, @TOT_FAC) 
	AS SOURCE(IDE_COT,TOT_FAC)
    ON TARGET.IDE_COT = SOURCE.IDE_COT  
    WHEN MATCHED THEN 
        UPDATE SET TARGET.IDE_COT=TARGET.IDE_COT
    WHEN NOT MATCHED THEN
        INSERT (IDE_COT, FEC_FAC, TOT_FAC) 
        VALUES (SOURCE.IDE_COT, GETDATE(), SOURCE.TOT_FAC);
GO

-- Insertar clientes
INSERT INTO cliente (NOM_CLI, APE_CLI, DNI_CLI, TEL_CLI, DIR_CLI) VALUES
('Juan', 'Pérez', '12345678', '999999999', 'Av. Los Robles 123'),
('María', 'González', '87654321', '988888888', 'Jr. Las Flores 456');

-- Insertar vehículos
INSERT INTO vehiculo (IDE_CLI, MAR_VEH, MOD_VEH, PLA_VEH) VALUES
(1, 'Toyota', 'Corolla', 'ABC-123'),
(2, 'Hyundai', 'Accent', 'XYZ-987');

-- Insertar repuestos
INSERT INTO repuesto (NOM_REP, STO_REP, PRE_REP) VALUES
('Filtro de aceite', 50, 30.00),
('Pastilla de freno', 100, 45.00);

-- Insertar servicios
INSERT INTO servicio (NOM_SER, PRE_SER) VALUES
('Cambio de aceite', 80.00),
('Lavado', 30.00),
('Planchado', 150.00),
('Alineamiento', 60.00);

-- Insertar cotizaciones
INSERT INTO cotizacion (FEC_COT, IDE_VEH) VALUES
(GETDATE(), 1),
(GETDATE(), 2);

-- Insertar detalle de repuestos
INSERT INTO detalle_repuesto (IDE_COT, IDE_REP, CAN_DET, STO_DET) VALUES
(1, 1, 1, 30.00),
(1, 2, 2, 30.00),
(2, 2, 2, 90.00);

-- Insertar detalle de servicios
INSERT INTO detalle_servicio (IDE_COT, IDE_SER) VALUES
(1, 1),
(1, 2),
(2, 2);

-- Insertar facturas
INSERT INTO factura (IDE_COT, FEC_FAC, TOT_FAC) VALUES
(1, GETDATE(), 110.00),
(2, GETDATE(), 150.00); 